{"ast":null,"code":"var isArray = Array.isArray;\nvar getPrototypeOf = Object.getPrototypeOf,\n    objectProto = Object.prototype,\n    getKeys = Object.keys;\nexport function argsArgArrayOrObject(args) {\n  if (args.length === 1) {\n    var first_1 = args[0];\n\n    if (isArray(first_1)) {\n      return {\n        args: first_1,\n        keys: null\n      };\n    }\n\n    if (isPOJO(first_1)) {\n      var keys = getKeys(first_1);\n      return {\n        args: keys.map(function (key) {\n          return first_1[key];\n        }),\n        keys: keys\n      };\n    }\n  }\n\n  return {\n    args: args,\n    keys: null\n  };\n}\n\nfunction isPOJO(obj) {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts"],"names":[],"mappings":"AAAQ,IAAA,OAAO,GAAK,KAAK,CAAV,OAAP;AACA,IAAA,cAAc,GAA4C,MAAM,CAAlD,cAAd;AAAA,IAA2B,WAAW,GAAoB,MAAM,CAA1B,SAAtC;AAAA,IAA8C,OAAO,GAAK,MAAM,CAAX,IAArD;AAQR,OAAM,SAAU,oBAAV,CAA+D,IAA/D,EAAsF;AAC1F,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,QAAM,OAAK,GAAG,IAAI,CAAC,CAAD,CAAlB;;AACA,QAAI,OAAO,CAAC,OAAD,CAAX,EAAoB;AAClB,aAAO;AAAE,QAAA,IAAI,EAAE,OAAR;AAAe,QAAA,IAAI,EAAE;AAArB,OAAP;AACD;;AACD,QAAI,MAAM,CAAC,OAAD,CAAV,EAAmB;AACjB,UAAM,IAAI,GAAG,OAAO,CAAC,OAAD,CAApB;AACA,aAAO;AACL,QAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,UAAC,GAAD,EAAI;AAAK,iBAAA,OAAK,CAAL,GAAK,CAAL;AAAU,SAA5B,CADD;AAEL,QAAA,IAAI,EAAA;AAFC,OAAP;AAID;AACF;;AAED,SAAO;AAAE,IAAA,IAAI,EAAE,IAAR;AAAqB,IAAA,IAAI,EAAE;AAA3B,GAAP;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAAwB;AACtB,SAAO,GAAG,IAAI,OAAO,GAAP,KAAe,QAAtB,IAAkC,cAAc,CAAC,GAAD,CAAd,KAAwB,WAAjE;AACD","sourcesContent":["const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n"]},"metadata":{},"sourceType":"module"}