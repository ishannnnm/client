{"ast":null,"code":"import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n  timeoutProvider.setTimeout(function () {\n    var onUnhandledError = config.onUnhandledError;\n\n    if (onUnhandledError) {\n      onUnhandledError(err);\n    } else {\n      throw err;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/util/reportUnhandledError.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,eAAT,QAAgC,8BAAhC;AAWA,OAAM,SAAU,oBAAV,CAA+B,GAA/B,EAAuC;AAC3C,EAAA,eAAe,CAAC,UAAhB,CAA2B,YAAA;AACjB,QAAA,gBAAgB,GAAK,MAAM,CAAX,gBAAhB;;AACR,QAAI,gBAAJ,EAAsB;AAEpB,MAAA,gBAAgB,CAAC,GAAD,CAAhB;AACD,KAHD,MAGO;AAEL,YAAM,GAAN;AACD;AACF,GATD;AAUD","sourcesContent":["import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}