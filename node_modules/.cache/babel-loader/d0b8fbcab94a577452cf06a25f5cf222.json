{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function onErrorResumeNext() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  var nextSources = argsOrArgArray(sources);\n  return operate(function (source, subscriber) {\n    var remaining = __spreadArray([source], __read(nextSources));\n\n    var subscribeNext = function subscribeNext() {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          var nextSource = void 0;\n\n          try {\n            nextSource = innerFrom(remaining.shift());\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          var innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);\n          subscriber.add(nextSource.subscribe(innerSub));\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts"],"names":[],"mappings":";AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,IAAT,QAAqB,cAArB;AA4EA,OAAM,SAAU,iBAAV,GAA2B;AAC/B,MAAA,OAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAyE;AAAzE,IAAA,OAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAMA,MAAM,WAAW,GAAI,cAAc,CAAC,OAAD,CAAnC;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAM,SAAS,GAAA,aAAA,CAAA,CAAI,MAAJ,CAAA,EAAU,MAAA,CAAK,WAAL,CAAV,CAAf;;AACA,QAAM,aAAa,GAAG,SAAhB,aAAgB,GAAA;AACpB,UAAI,CAAC,UAAU,CAAC,MAAhB,EAAwB;AACtB,YAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAI,UAAU,GAAA,KAAA,CAAd;;AACA,cAAI;AACF,YAAA,UAAU,GAAG,SAAS,CAAgB,SAAS,CAAC,KAAV,EAAhB,CAAtB;AACD,WAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAA,aAAa;AACb;AACD;;AAMD,cAAM,QAAQ,GAAG,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,SAAnC,EAA8C,IAA9C,EAAoD,IAApD,CAAjB;AACA,UAAA,UAAU,CAAC,GAAX,CAAe,UAAU,CAAC,SAAX,CAAqB,QAArB,CAAf;AACA,UAAA,QAAQ,CAAC,GAAT,CAAa,aAAb;AACD,SAhBD,MAgBO;AACL,UAAA,UAAU,CAAC,QAAX;AACD;AACF;AACF,KAtBD;;AAwBA,IAAA,aAAa;AACd,GA3Ba,CAAd;AA4BD","sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n *\n *\n * ## Example\n * Subscribe to the next Observable after map fails\n * ```ts\n * import { of } from 'rxjs';\n * import { onErrorResumeNext, map } from 'rxjs/operators';\n *\n * of(1, 2, 3, 0).pipe(\n *   map(x => {\n *       if (x === 0) { throw Error(); }\n *        return 10 / x;\n *   }),\n *   onErrorResumeNext(of(1, 2, 3)),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('that\\'s it!')\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} nextSources Observables passed either directly or as an array.\n * @return A function that returns an Observable that emits values from source\n * Observable, but - if it errors - subscribes to the next passed Observable\n * and so on, until it completes or runs out of Observables.\n */\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  // For some reason, TS 4.1 RC gets the inference wrong here and infers the\n  // result to be `A[number][]` - completely dropping the ObservableInput part\n  // of the type. This makes no sense whatsoever. As a workaround, the type is\n  // asserted explicitly.\n  const nextSources = (argsOrArgArray(sources) as unknown) as ObservableInputTuple<A>;\n\n  return operate((source, subscriber) => {\n    const remaining = [source, ...nextSources];\n    const subscribeNext = () => {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          let nextSource: Observable<A[number]>;\n          try {\n            nextSource = innerFrom<T | A[number]>(remaining.shift()!);\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          // Here we have to use one of our Subscribers, or it does not wire up\n          // The `closed` property of upstream Subscribers synchronously, that\n          // would result in situation were we could not stop a synchronous firehose\n          // with something like `take(3)`.\n          const innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);\n          subscriber.add(nextSource.subscribe(innerSub));\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}