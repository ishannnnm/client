{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { merge } from './merge';\nexport function mergeWith() {\n  var otherSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n\n  return merge.apply(void 0, __spreadArray([], __read(otherSources)));\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/operators/mergeWith.ts"],"names":[],"mappings":";AACA,SAAS,KAAT,QAAsB,SAAtB;AA2CA,OAAM,SAAU,SAAV,GAAmB;AACvB,MAAA,YAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA6C;AAA7C,IAAA,YAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,SAAO,KAAK,CAAA,KAAL,CAAK,KAAA,CAAL,EAAK,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,YAAJ,CAAA,CAAL,CAAP;AACD","sourcesContent":["import { ObservableInputTuple, OperatorFunction } from '../types';\nimport { merge } from './merge';\n\n/**\n * Merge the values from all observables to an single observable result.\n *\n * Creates an observable, that when subscribed to, subscribes to the source\n * observable, and all other sources provided as arguments. All values from\n * every source are emitted from the resulting subscription.\n *\n * When all sources complete, the resulting observable will complete.\n *\n * When any one source errors, the resulting observable will error.\n *\n *\n * ### Example\n *\n * Joining all outputs from multiple user input event streams:\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map, mergeWith } from 'rxjs/operators';\n *\n * const clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\n * const mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\n * const dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\n *\n * mousemoves$.pipe(\n *   mergeWith(clicks$, dblclicks$),\n * )\n * .subscribe(x => console.log(x));\n *\n * // result (assuming user interactions)\n * // \"mousemove\"\n * // \"mousemove\"\n * // \"mousemove\"\n * // \"click\"\n * // \"click\"\n * // \"dblclick\"\n * ```\n * @param otherSources the sources to combine the current source with.\n * @return A function that returns an Observable that merges the values from\n * all given Observables.\n */\nexport function mergeWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return merge(...otherSources);\n}\n"]},"metadata":{},"sourceType":"module"}