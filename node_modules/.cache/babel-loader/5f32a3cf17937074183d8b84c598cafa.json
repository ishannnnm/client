{"ast":null,"code":"import { map } from './map';\nexport function mapTo(value) {\n  return map(function () {\n    return value;\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/operators/mapTo.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,QAAoB,OAApB;AAoCA,OAAM,SAAU,KAAV,CAAmB,KAAnB,EAA2B;AAC/B,SAAO,GAAG,CAAC,YAAA;AAAM,WAAA,KAAA;AAAK,GAAZ,CAAV;AACD","sourcesContent":["import { OperatorFunction } from '../types';\nimport { map } from './map';\n\nexport function mapTo<R>(value: R): OperatorFunction<any, R>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n * Map every click to the string 'Hi'\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param value The value to map each source value to.\n * @return A function that returns an Observable that emits the given `value`\n * every time the source Observable emits.\n */\nexport function mapTo<R>(value: R): OperatorFunction<any, R> {\n  return map(() => value);\n}\n"]},"metadata":{},"sourceType":"module"}