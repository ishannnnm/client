{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from 'rxjs';\nimport { object } from \"prop-types\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromD = document.getElementById(screen.screen_name);\n        if (!screenFromDom) continue;\n        let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/src/utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","object","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","keys","length","screen","screenFromD","screen_name","screenFromDom","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AAEA,SAAQC,OAAR,QAAsB,MAAtB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAO/BC,EAAAA,WAAW,GAAE;AAAA,SAGbC,cAHa,GAGE,MAAI;AACf,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAtB;AACA,UAAG,CAACF,eAAJ,EAAqB;AACrBA,MAAAA,eAAe,CAACG,cAAhB,CAA+B;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAA/B;AACH,KAPY;;AAAA,SAQbC,YARa,GAQA,MAAI;AACb,UAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAG,CAACI,UAAJ,EAAgB;AAChBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAA1B;AACH,KAZY;;AAAA,SAabG,eAba,GAaK,CAACC,IAAD,EAAOC,IAAP,KAAc;AAC5B,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AAEA,UAAIC,gBAAgB,GAAGJ,UAAU,GAACK,MAAM,CAACC,WAAlB,IAAiCJ,aAAa,IAAE,CAAvE;AACA,UAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAkBE,aAAa,IAAIG,MAAM,CAACC,WAAlE;;AAEA,cAAOT,IAAP;AACI,aAAK,SAAL;AACA,iBAAOO,gBAAP;;AAEA,aAAK,UAAL;AACI,iBAAOG,iBAAP;;AAEA;AACI,iBAAO,KAAP;AARZ;AAWH,KAhCY;;AAAA,SAkCbC,+BAlCa,GAkCsBC,KAAD,IAAS;AACvC,UAAG,CAACA,KAAD,IAAUzB,MAAM,CAAC0B,IAAP,CAAYD,KAAZ,EAAmBE,MAAnB,GAA2B,CAAxC,EACA;;AACA,WAAI,IAAIC,MAAR,IAAkB9B,aAAlB,EAAgC;AAC5B,YAAI+B,WAAW,GAAGxB,QAAQ,CAACC,cAAT,CAAwBsB,MAAM,CAACE,WAA/B,CAAlB;AACA,YAAG,CAACC,aAAJ,EACA;AAEA,YAAIC,YAAY,GAAG,KAAKrB,eAAL,CAAqBoB,aAArB,EAAoC,UAApC,CAAnB;AACA,YAAIX,gBAAgB,GAAG,KAAKT,eAAL,CAAqBoB,aAArB,EAAmC,SAAnC,CAAvB;;AAEA,YAAGC,YAAY,IAAIZ,gBAAnB,EAAoC;AAChC,cAAGA,gBAAgB,IAAI,CAACQ,MAAM,CAACK,eAA/B,EAA+C;AAC3ChC,YAAAA,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;AACnCC,cAAAA,YAAY,EAAGR,MAAM,CAACE;AADa,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA0B,IAA1B;AACA;AACH;;AACD,cAAGI,YAAH,EAAgB;AACZ/B,YAAAA,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;AACxCG,cAAAA,YAAY,EAAGV,MAAM,CAACE;AADkB,aAA5C;AAGA;AAEH;AACJ;AACJ;AACJ,KA9DY;;AACTT,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;AACH;;AAT8B;AAAdvB,a,CAEVuC,a,GAAgB,IAAIvC,aAAJ,E;AAFNA,a,CAIVoC,wB,GAA2B,IAAItC,OAAJ,E;AAJjBE,a,CAKViC,mB,GAAsB,IAAInC,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\n\nimport {Subject} from 'rxjs';\nimport { object } from \"prop-types\";\n\nexport default class ScrollService {\n\n    static scrollHandler = new ScrollService();\n\n    static currentScreenBroadCaster = new Subject();\n    static currentScreenFadeIn = new Subject();\n\n    constructor(){\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n    }\n    scrollToHireMe=()=>{\n        let contactMeScreen = document.getElementById(\"Contact Me\")\n        if(!contactMeScreen) return;\n        contactMeScreen.scrollIntoView({behavior: \"smooth\"})\n    }\n    scrollToHome=()=>{\n        let homeScreen = document.getElementById(\"Home\")\n        if(!homeScreen) return;\n        homeScreen.scrollIntoView({behavior: \"smooth\"})\n    }\n    isElementInView = (elem, type)=>{\n        let rec = elem.getBoundingClientRect();\n        let elementTop = rec.top;\n        let elementBottom = rec.Bottom;\n\n        let partiallyVisible = elementTop<window.innerHeight && elementBottom>=0;\n        let completelyVisible = elementTop >= 0&& elementBottom <= window.innerHeight;\n\n        switch(type){\n            case \"partial\":\n            return partiallyVisible;\n\n            case \"complete\":\n                return completelyVisible;\n\n                default:\n                    return false;\n        \n        }\n    }\n\n    checkCurrentScreenUnderViewport = (event)=>{\n        if(!event || object.keys(event).length <1)\n        return;\n        for(let screen of TOTAL_SCREENS){\n            let screenFromD = document.getElementById(screen.screen_name);\n            if(!screenFromDom)\n            continue;\n\n            let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n            let partiallyVisible = this.isElementInView(screenFromDom,\"partial\")\n\n            if(fullyVisible || partiallyVisible){\n                if(partiallyVisible && !screen.alreadyRendered){\n                    ScrollService.currentScreenFadeIn.next({\n                        fadeInScreen : screen.screen_name,\n                    });\n                    screen['alreadyRendered']=true;\n                    break;\n                }\n                if(fullyVisible){\n                    ScrollService.currentScreenBroadCaster.next({\n                        screenInView : screen.screen_name,\n                    });\n                    break;\n\n                }\n            }\n        }\n    };\n}"]},"metadata":{},"sourceType":"module"}