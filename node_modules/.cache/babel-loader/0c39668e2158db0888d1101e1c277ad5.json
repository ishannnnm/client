{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { raceInit } from '../observable/race';\nimport { operate } from '../util/lift';\nimport { identity } from '../util/identity';\nexport function raceWith() {\n  var otherSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n\n  return !otherSources.length ? identity : operate(function (source, subscriber) {\n    raceInit(__spreadArray([source], __read(otherSources)))(subscriber);\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/operators/raceWith.ts"],"names":[],"mappings":";AACA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,QAAT,QAAyB,kBAAzB;AAgCA,OAAM,SAAU,QAAV,GAAkB;AACtB,MAAA,YAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA6C;AAA7C,IAAA,YAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,SAAO,CAAC,YAAY,CAAC,MAAd,GACH,QADG,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,IAAA,QAAQ,CAAA,aAAA,CAAA,CAAiB,MAAjB,CAAA,EAAuB,MAAA,CAAK,YAAL,CAAvB,CAAA,CAAR,CAAmD,UAAnD;AACD,GAFM,CAFX;AAKD","sourcesContent":["import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { raceInit } from '../observable/race';\nimport { operate } from '../util/lift';\nimport { identity } from '../util/identity';\n\n/**\n * Creates an Observable that mirrors the first source Observable to emit a next,\n * error or complete notification from the combination of the Observable to which\n * the operator is applied and supplied Observables.\n *\n * ## Example\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { mapTo, raceWith } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * obs2.pipe(\n *   raceWith(obs3, obs1)\n * ).subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // Outputs\n * // a series of 'fast one'\n * ```\n *\n * @param otherSources Sources used to race for which Observable emits first.\n * @return A function that returns an Observable that mirrors the output of the\n * first Observable to emit an item.\n */\n\nexport function raceWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return !otherSources.length\n    ? identity\n    : operate((source, subscriber) => {\n        raceInit<T | A[number]>([source, ...otherSources])(subscriber);\n      });\n}\n"]},"metadata":{},"sourceType":"module"}