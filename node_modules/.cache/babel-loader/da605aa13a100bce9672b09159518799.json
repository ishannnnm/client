{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _a = config.count,\n      count = _a === void 0 ? Infinity : _a,\n      delay = config.delay,\n      _b = config.resetOnSuccess,\n      resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function resub_1() {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/operators/retry.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,QAAT,QAAyB,kBAAzB;AACA,SAAS,KAAT,QAAsB,qBAAtB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AA+EA,OAAM,SAAU,KAAV,CAAmB,aAAnB,EAAiE;AAA9C,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,QAAA;AAA8C;;AACrE,MAAI,MAAJ;;AACA,MAAI,aAAa,IAAI,OAAO,aAAP,KAAyB,QAA9C,EAAwD;AACtD,IAAA,MAAM,GAAG,aAAT;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG;AACP,MAAA,KAAK,EAAE;AADA,KAAT;AAGD;;AACO,MAAA,EAAA,GAAoE,MAAM,CAA1D,KAAhB;AAAA,MAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAW,EAAhB;AAAA,MAAkB,KAAK,GAA6C,MAAM,CAAnD,KAAvB;AAAA,MAAyB,EAAA,GAA2C,MAAM,CAAX,cAA/D;AAAA,MAAyC,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAA/D;AAER,SAAO,KAAK,IAAI,CAAT,GACH,QADG,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,QAAJ;;AACA,QAAM,iBAAiB,GAAG,SAApB,iBAAoB,GAAA;AACxB,UAAI,SAAS,GAAG,KAAhB;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AAEJ,YAAI,cAAJ,EAAoB;AAClB,UAAA,KAAK,GAAG,CAAR;AACD;;AACD,QAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD,OARH,EAUE,SAVF,EAWE,UAAC,GAAD,EAAI;AACF,YAAI,KAAK,KAAK,KAAd,EAAqB;AAEnB,cAAM,OAAK,GAAG,SAAR,OAAQ,GAAA;AACZ,gBAAI,QAAJ,EAAc;AACZ,cAAA,QAAQ,CAAC,WAAT;AACA,cAAA,QAAQ,GAAG,IAAX;AACA,cAAA,iBAAiB;AAClB,aAJD,MAIO;AACL,cAAA,SAAS,GAAG,IAAZ;AACD;AACF,WARD;;AAUA,cAAI,KAAK,IAAI,IAAb,EAAmB;AAIjB,gBAAM,QAAQ,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAAK,CAAC,KAAD,CAAjC,GAA2C,SAAS,CAAC,KAAK,CAAC,GAAD,EAAM,KAAN,CAAN,CAArE;AACA,gBAAM,oBAAkB,GAAG,IAAI,kBAAJ,CACzB,UADyB,EAEzB,YAAA;AAIE,cAAA,oBAAkB,CAAC,WAAnB;AACA,cAAA,OAAK;AACN,aARwB,EASzB,YAAA;AAGE,cAAA,UAAU,CAAC,QAAX;AACD,aAbwB,CAA3B;AAeA,YAAA,QAAQ,CAAC,SAAT,CAAmB,oBAAnB;AACD,WArBD,MAqBO;AAEL,YAAA,OAAK;AACN;AACF,SArCD,MAqCO;AAGL,UAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD;AACF,OAtDH,CADS,CAAX;;AA0DA,UAAI,SAAJ,EAAe;AACb,QAAA,QAAQ,CAAC,WAAT;AACA,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,iBAAiB;AAClB;AACF,KAjED;;AAkEA,IAAA,iBAAiB;AAClB,GAtEM,CAFX;AAyED","sourcesContent":["import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { Subscription } from '../Subscription';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\n\nexport interface RetryConfig {\n  /**\n   * The maximum number of times to retry.\n   */\n  count?: number;\n  /**\n   * The number of milliseconds to delay before retrying, OR a function to\n   * return a notifier for delaying. If a function is given, that function should\n   * return a notifier that, when it emits will retry the source. If the notifier\n   * completes _without_ emitting, the resulting observable will complete without error,\n   * if the notifier errors, the error will be pushed to the result.\n   */\n  delay?: number | ((error: any, retryCount: number) => ObservableInput<any>);\n  /**\n   * Whether or not to reset the retry counter when the retried subscription\n   * emits its first value.\n   */\n  resetOnSuccess?: boolean;\n}\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n *\n * ## Example\n * ```ts\n * import { interval, of, throwError } from 'rxjs';\n * import { mergeMap, retry } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(\n *   mergeMap(val => {\n *     if(val > 5){\n *       return throwError('Error!');\n *     }\n *     return of(val);\n *   }),\n *   //retry 2 times on error\n *   retry(2)\n * );\n *\n * const subscribe = example.subscribe({\n *   next: val => console.log(val),\n *   error: val => console.log(`${val}: Retried 2 times then quit!`)\n * });\n *\n * // Output:\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // \"Error!: Retried 2 times then quit!\"\n * ```\n *\n * @param count - Number of retry attempts before failing.\n * @param resetOnSuccess - When set to `true` every successful emission will reset the error count\n * @return A function that returns an Observable that will resubscribe to the\n * source stream when the source stream errors, at most `count` times.\n */\nexport function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that mirrors the source observable unless it errors. If it errors, the source observable\n * will be resubscribed to (or \"retried\") based on the configuration passed here. See documentation\n * for {@link RetryConfig} for more details.\n *\n * @param config - The retry configuration\n */\nexport function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;\n\nexport function retry<T>(configOrCount: number | RetryConfig = Infinity): MonoTypeOperatorFunction<T> {\n  let config: RetryConfig;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount,\n    };\n  }\n  const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n\n  return count <= 0\n    ? identity\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let innerSub: Subscription | null;\n        const subscribeForRetry = () => {\n          let syncUnsub = false;\n          innerSub = source.subscribe(\n            new OperatorSubscriber(\n              subscriber,\n              (value) => {\n                // If we're resetting on success\n                if (resetOnSuccess) {\n                  soFar = 0;\n                }\n                subscriber.next(value);\n              },\n              // Completions are passed through to consumer.\n              undefined,\n              (err) => {\n                if (soFar++ < count) {\n                  // We are still under our retry count\n                  const resub = () => {\n                    if (innerSub) {\n                      innerSub.unsubscribe();\n                      innerSub = null;\n                      subscribeForRetry();\n                    } else {\n                      syncUnsub = true;\n                    }\n                  };\n\n                  if (delay != null) {\n                    // The user specified a retry delay.\n                    // They gave us a number, use a timer, otherwise, it's a function,\n                    // and we're going to call it to get a notifier.\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                    const notifierSubscriber = new OperatorSubscriber(\n                      subscriber,\n                      () => {\n                        // After we get the first notification, we\n                        // unsubscribe from the notifer, because we don't want anymore\n                        // and we resubscribe to the source.\n                        notifierSubscriber.unsubscribe();\n                        resub();\n                      },\n                      () => {\n                        // The notifier completed without emitting.\n                        // The author is telling us they want to complete.\n                        subscriber.complete();\n                      }\n                    );\n                    notifier.subscribe(notifierSubscriber);\n                  } else {\n                    // There was no notifier given. Just resub immediately.\n                    resub();\n                  }\n                } else {\n                  // We're past our maximum number of retries.\n                  // Just send along the error.\n                  subscriber.error(err);\n                }\n              }\n            )\n          );\n          if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          }\n        };\n        subscribeForRetry();\n      });\n}\n"]},"metadata":{},"sourceType":"module"}