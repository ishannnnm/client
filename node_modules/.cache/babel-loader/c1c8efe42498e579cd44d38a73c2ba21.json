{"ast":null,"code":"var _jsxFileName = \"/Users/ishannnnnm/Desktop/portfolio app/client/src/PortfolioContainer/Home/Header/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from \"../../../utilities/commonUtils\";\nimport ScrollService from \"../../../utilities/ScrollService\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Header() {\n  _s();\n\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = currentScreen => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n  };\n\n  let currentScreenSubscription = ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getHeaderOptionsClass(i),\n      onClick: () => switchScreen(i, Screen),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: Screen.screen_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, Screen.screen_name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this));\n  };\n\n  const getHeaderOptionsClass = index => {\n    let classes = \"header-option\";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator\";\n    if (selectedScreen === index) classes += \"selected-header-option\";\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behaviour: \"smooth\"\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-hamburger\",\n        onClick: () => setShowHeaderOptions(!showHeaderOptions),\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"header-hamburger-bars\",\n          icon: faBars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"ISHAN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: showHeaderOptions ? \"header-options show-hamburger-options\" : \"header-options\",\n        children: getHeaderOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Header, \"ujF17CXvQfKrqR4WPi1qhAXORpE=\");\n\n_c = Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/src/PortfolioContainer/Home/Header/Header.js"],"names":["React","useState","useEffect","TOTAL_SCREENS","GET_SCREEN_INDEX","ScrollService","faBars","FontAwesomeIcon","Header","selectedScreen","setSelectedScreen","showHeaderOptions","setShowHeaderOptions","updateCurrentScreen","currentScreen","screenInView","screenIndex","currentScreenSubscription","currentScreenBroadCaster","subscribe","getHeaderOptions","map","Screen","i","getHeaderOptionsClass","switchScreen","screen_name","index","classes","length","screen","screenComponent","document","getElementById","scrollIntoView","behaviour","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  TOTAL_SCREENS,\n  GET_SCREEN_INDEX\n} from \"../../../utilities/commonUtils\";\nimport ScrollService from \"../../../utilities/ScrollService\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\n\nexport default function Header() {\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = (currentScreen) => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n  };\n\n  let currentScreenSubscription =\n    ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return ( TOTAL_SCREENS.map((Screen, i) => (\n      <div\n        key={Screen.screen_name}\n        className={getHeaderOptionsClass(i)}\n        onClick={() => switchScreen(i, Screen)}\n      >\n        <span>{Screen.screen_name}</span>\n      </div>\n    )));\n  };\n\n  const getHeaderOptionsClass = (index) => {\n    let classes = \"header-option\";\n    if (index < TOTAL_SCREENS.length - 1) \n    classes += \"header-option-seperator\";\n\n    if (selectedScreen === index) \n    classes += \"selected-header-option\";\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n\n    screenComponent.scrollIntoView({ behaviour: \"smooth\" });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n    useEffect(()=>{\n      return()=>{\n        currentScreenSubscription.unsubscribe();\n      };\n    }, [currentScreenSubscription]);\n  return (\n    \n      <div\n        className=\"header-container\"\n        onClick={() => setShowHeaderOptions(!showHeaderOptions)}\n      >\n        <div className=\"header-parent\">\n          <div\n            className=\"header-hamburger\"\n            onClick={() => setShowHeaderOptions(!showHeaderOptions)}\n          >\n            <FontAwesomeIcon className=\"header-hamburger-bars\" icon={faBars} />\n          </div>\n          <div className=\"header-logo\" >\n            <span>ISHAN</span>\n          </div>\n          <div\n            className={(showHeaderOptions)\n            ? \"header-options show-hamburger-options\" \n            :\"header-options\"} >\n            {getHeaderOptions()}\n          </div>\n        </div>\n      </div>\n    \n  );\n}\n"]},"metadata":{},"sourceType":"module"}