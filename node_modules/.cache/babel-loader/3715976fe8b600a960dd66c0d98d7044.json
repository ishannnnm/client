{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\n\nvar AsapAction = function (_super) {\n  __extends(AsapAction, _super);\n\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  };\n\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (!scheduler.actions.some(function (action) {\n      return action.id === id;\n    })) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AsapAction;\n}(AsyncAction);\n\nexport { AsapAction };","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/scheduler/AsapAction.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,eAA5B;AAGA,SAAS,iBAAT,QAAkC,qBAAlC;;AAEA,IAAA,UAAA,GAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AACjC,WAAA,UAAA,CAAsB,SAAtB,EAA0D,IAA1D,EAA6G;AAA7G,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,IAAjB,KAAsB,IADxB;;AAAsB,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;AAAoC,IAAA,KAAA,CAAA,IAAA,GAAA,IAAA;;AAEzD;;AAES,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAAmD,EAAnD,EAA6D,KAA7D,EAA8E;AAAjB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAiB;;AAE5E,QAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,GAAG,CAA9B,EAAiC;AAC/B,aAAO,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,SAArB,EAAgC,EAAhC,EAAoC,KAApC,CAAP;AACD;;AAED,IAAA,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAuB,IAAvB;AAIA,WAAO,SAAS,CAAC,UAAV,KAAyB,SAAS,CAAC,UAAV,GAAuB,iBAAiB,CAAC,YAAlB,CAA+B,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAqB,SAArB,EAAgC,SAAhC,CAA/B,CAAhD,CAAP;AACD,GAXS;;AAYA,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAAmD,EAAnD,EAA6D,KAA7D,EAA8E;AAAjB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAiB;;AAI5E,QAAK,KAAK,IAAI,IAAT,IAAiB,KAAK,GAAG,CAA1B,IAAiC,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAL,GAAa,CAAnE,EAAuE;AACrE,aAAO,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,SAArB,EAAgC,EAAhC,EAAoC,KAApC,CAAP;AACD;;AAID,QAAI,CAAC,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAuB,UAAC,MAAD,EAAO;AAAK,aAAA,MAAM,CAAC,EAAP,KAAA,EAAA;AAAgB,KAAnD,CAAL,EAA2D;AACzD,MAAA,iBAAiB,CAAC,cAAlB,CAAiC,EAAjC;AACA,MAAA,SAAS,CAAC,UAAV,GAAuB,SAAvB;AACD;;AAED,WAAO,SAAP;AACD,GAhBS;;AAiBZ,SAAA,UAAA;AAAC,CAlCD,CAAmC,WAAnC,CAAA","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\nimport { immediateProvider } from './immediateProvider';\n\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AsapScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested microtask and set the scheduled flag to undefined\n    // so the next AsapAction will request its own.\n    if (!scheduler.actions.some((action) => action.id === id)) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}