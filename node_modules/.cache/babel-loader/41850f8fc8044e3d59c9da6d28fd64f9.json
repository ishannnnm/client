{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\n\nvar Subscription = function () {\n  function Subscription(initialTeardown) {\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._teardowns = null;\n  }\n\n  Subscription.prototype.unsubscribe = function () {\n    var e_1, _a, e_2, _b;\n\n    var errors;\n\n    if (!this.closed) {\n      this.closed = true;\n      var _parentage = this._parentage;\n\n      if (_parentage) {\n        this._parentage = null;\n\n        if (Array.isArray(_parentage)) {\n          try {\n            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n              var parent_1 = _parentage_1_1.value;\n              parent_1.remove(this);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      var initialTeardown = this.initialTeardown;\n\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      var _teardowns = this._teardowns;\n\n      if (_teardowns) {\n        this._teardowns = null;\n\n        try {\n          for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {\n            var teardown_1 = _teardowns_1_1.value;\n\n            try {\n              execTeardown(teardown_1);\n            } catch (err) {\n              errors = errors !== null && errors !== void 0 ? errors : [];\n\n              if (err instanceof UnsubscriptionError) {\n                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  };\n\n  Subscription.prototype.add = function (teardown) {\n    var _a;\n\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n\n          teardown._addParent(this);\n        }\n\n        (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\n      }\n    }\n  };\n\n  Subscription.prototype._hasParent = function (parent) {\n    var _parentage = this._parentage;\n    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n  };\n\n  Subscription.prototype._addParent = function (parent) {\n    var _parentage = this._parentage;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  };\n\n  Subscription.prototype._removeParent = function (parent) {\n    var _parentage = this._parentage;\n\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  };\n\n  Subscription.prototype.remove = function (teardown) {\n    var _teardowns = this._teardowns;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  };\n\n  Subscription.EMPTY = function () {\n    var empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  }();\n\n  return Subscription;\n}();\n\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\n\nfunction execTeardown(teardown) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/Subscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered teardowns to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _teardowns: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the teardown\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown } = this;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _teardowns } = this;\n      if (_teardowns) {\n        this._teardowns = null;\n        for (const teardown of _teardowns) {\n          try {\n            execTeardown(teardown);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a teardown to this subscription, so that teardown will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever teardown is passed to it\n   * will automatically be executed (unless the teardown itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The teardown logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the teardown if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever teardown is handed to it automatically.\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = this._teardowns ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a teardown from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All teardown instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The teardown to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _teardowns } = this;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execTeardown(teardown: Unsubscribable | (() => void)) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}