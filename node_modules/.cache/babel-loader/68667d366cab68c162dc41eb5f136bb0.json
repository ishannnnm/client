{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n\n    var connection = this._connection;\n\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(new OperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nexport { ConnectableObservable };","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,QAAQ,IAAI,mBAArB,QAAgD,uBAAhD;AACA,SAAS,kBAAT,QAAmC,iCAAnC;AACA,SAAS,OAAT,QAAwB,cAAxB;;AASA,IAAA,qBAAA,GAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;;AAgB5C,WAAA,qBAAA,CAAmB,MAAnB,EAAoD,cAApD,EAAoF;AAApF,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAAmB,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AAAiC,IAAA,KAAA,CAAA,cAAA,GAAA,cAAA;AAf1C,IAAA,KAAA,CAAA,QAAA,GAA8B,IAA9B;AACA,IAAA,KAAA,CAAA,SAAA,GAAoB,CAApB;AACA,IAAA,KAAA,CAAA,WAAA,GAAmC,IAAnC;;AAkBR,QAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,MAAA,KAAI,CAAC,IAAL,GAAY,MAAM,CAAC,IAAnB;AACD;;;AACF;;AAGS,EAAA,qBAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,UAArB,EAA8C;AAC5C,WAAO,KAAK,UAAL,GAAkB,SAAlB,CAA4B,UAA5B,CAAP;AACD,GAFS;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,UAAA,GAAV,YAAA;AACE,QAAM,OAAO,GAAG,KAAK,QAArB;;AACA,QAAI,CAAC,OAAD,IAAY,OAAO,CAAC,SAAxB,EAAmC;AACjC,WAAK,QAAL,GAAgB,KAAK,cAAL,EAAhB;AACD;;AACD,WAAO,KAAK,QAAZ;AACD,GANS;;AAQA,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,SAAK,SAAL,GAAiB,CAAjB;AACQ,QAAA,WAAW,GAAK,KAAL,WAAX;AACR,SAAK,QAAL,GAAgB,KAAK,WAAL,GAAmB,IAAnC;AACA,IAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,WAAb,EAAA;AACD,GALS;;AAWV,EAAA,qBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,UAAU,GAAG,KAAK,WAAtB;;AACA,QAAI,CAAC,UAAL,EAAiB;AACf,MAAA,UAAU,GAAG,KAAK,WAAL,GAAmB,IAAI,YAAJ,EAAhC;AACA,UAAM,SAAO,GAAG,KAAK,UAAL,EAAhB;AACA,MAAA,UAAU,CAAC,GAAX,CACE,KAAK,MAAL,CAAY,SAAZ,CACE,IAAI,kBAAJ,CACE,SADF,EAEE,SAFF,EAGE,YAAA;AACE,QAAA,KAAI,CAAC,SAAL;;AACA,QAAA,SAAO,CAAC,QAAR;AACD,OANH,EAOE,UAAC,GAAD,EAAI;AACF,QAAA,KAAI,CAAC,SAAL;;AACA,QAAA,SAAO,CAAC,KAAR,CAAc,GAAd;AACD,OAVH,EAWE,YAAA;AAAM,eAAA,KAAI,CAAJ,SAAA,EAAA;AAAgB,OAXxB,CADF,CADF;;AAkBA,UAAI,UAAU,CAAC,MAAf,EAAuB;AACrB,aAAK,WAAL,GAAmB,IAAnB;AACA,QAAA,UAAU,GAAG,YAAY,CAAC,KAA1B;AACD;AACF;;AACD,WAAO,UAAP;AACD,GA7BD;;AAmCA,EAAA,qBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,mBAAmB,GAAG,IAAH,CAA1B;AACD,GAFD;;AAGF,SAAA,qBAAA;AAAC,CAxFD,CAA8C,UAA9C,CAAA","sourcesContent":["import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          new OperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}