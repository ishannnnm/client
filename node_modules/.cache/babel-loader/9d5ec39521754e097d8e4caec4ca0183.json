{"ast":null,"code":"import { EmptyError } from './util/EmptyError';\nexport function lastValueFrom(source, config) {\n  var hasConfig = typeof config === 'object';\n  return new Promise(function (resolve, reject) {\n    var _hasValue = false;\n\n    var _value;\n\n    source.subscribe({\n      next: function (value) {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: function () {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/lastValueFrom.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,mBAA3B;AAqDA,OAAM,SAAU,aAAV,CAA8B,MAA9B,EAAqD,MAArD,EAAoF;AACxF,MAAM,SAAS,GAAG,OAAO,MAAP,KAAkB,QAApC;AACA,SAAO,IAAI,OAAJ,CAAmB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACxC,QAAI,SAAS,GAAG,KAAhB;;AACA,QAAI,MAAJ;;AACA,IAAA,MAAM,CAAC,SAAP,CAAiB;AACf,MAAA,IAAI,EAAE,UAAC,KAAD,EAAM;AACV,QAAA,MAAM,GAAG,KAAT;AACA,QAAA,SAAS,GAAG,IAAZ;AACD,OAJc;AAKf,MAAA,KAAK,EAAE,MALQ;AAMf,MAAA,QAAQ,EAAE,YAAA;AACR,YAAI,SAAJ,EAAe;AACb,UAAA,OAAO,CAAC,MAAD,CAAP;AACD,SAFD,MAEO,IAAI,SAAJ,EAAe;AACpB,UAAA,OAAO,CAAC,MAAO,CAAC,YAAT,CAAP;AACD,SAFM,MAEA;AACL,UAAA,MAAM,CAAC,IAAI,UAAJ,EAAD,CAAN;AACD;AACF;AAdc,KAAjB;AAgBD,GAnBM,CAAP;AAoBD","sourcesContent":["import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ### Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function.\n *\n * ```ts\n * import { interval, lastValueFrom } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${finalNumber}`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // \"The final number is 9\"\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}