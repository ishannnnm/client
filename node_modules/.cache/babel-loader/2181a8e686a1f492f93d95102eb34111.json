{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function buffer(closingNotifier) {\n  return operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    closingNotifier.subscribe(new OperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/operators/buffer.ts"],"names":[],"mappings":"AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,IAAT,QAAqB,cAArB;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AAwCA,OAAM,SAAU,MAAV,CAAoB,eAApB,EAAoD;AACxD,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAEhC,QAAI,aAAa,GAAQ,EAAzB;AAGA,IAAA,MAAM,CAAC,SAAP,CACE,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AAAK,aAAA,aAAa,CAAC,IAAd,CAAA,KAAA,CAAA;AAAyB,KAFtC,EAGE,YAAA;AACE,MAAA,UAAU,CAAC,IAAX,CAAgB,aAAhB;AACA,MAAA,UAAU,CAAC,QAAX;AACD,KANH,CADF;AAYA,IAAA,eAAe,CAAC,SAAhB,CACE,IAAI,kBAAJ,CACE,UADF,EAEE,YAAA;AAEE,UAAM,CAAC,GAAG,aAAV;AACA,MAAA,aAAa,GAAG,EAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,CAAhB;AACD,KAPH,EAQE,IARF,CADF;AAaA,WAAO,YAAA;AAEL,MAAA,aAAa,GAAG,IAAhB;AACD,KAHD;AAID,GAlCa,CAAd;AAmCD","sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { buffer } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    closingNotifier.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on teardown.\n      currentBuffer = null!;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}