{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nvar VirtualTimeScheduler = function (_super) {\n  __extends(VirtualTimeScheduler, _super);\n\n  function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {\n    if (schedulerActionCtor === void 0) {\n      schedulerActionCtor = VirtualAction;\n    }\n\n    if (maxFrames === void 0) {\n      maxFrames = Infinity;\n    }\n\n    var _this = _super.call(this, schedulerActionCtor, function () {\n      return _this.frame;\n    }) || this;\n\n    _this.maxFrames = maxFrames;\n    _this.frame = 0;\n    _this.index = -1;\n    return _this;\n  }\n\n  VirtualTimeScheduler.prototype.flush = function () {\n    var _a = this,\n        actions = _a.actions,\n        maxFrames = _a.maxFrames;\n\n    var error;\n    var action;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  VirtualTimeScheduler.frameTimeFactor = 10;\n  return VirtualTimeScheduler;\n}(AsyncScheduler);\n\nexport { VirtualTimeScheduler };\n\nvar VirtualAction = function (_super) {\n  __extends(VirtualAction, _super);\n\n  function VirtualAction(scheduler, work, index) {\n    if (index === void 0) {\n      index = scheduler.index += 1;\n    }\n\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.index = index;\n    _this.active = true;\n    _this.index = scheduler.index = index;\n    return _this;\n  }\n\n  VirtualAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (Number.isFinite(delay)) {\n      if (!this.id) {\n        return _super.prototype.schedule.call(this, state, delay);\n      }\n\n      this.active = false;\n      var action = new VirtualAction(this.scheduler, this.work);\n      this.add(action);\n      return action.schedule(state, delay);\n    } else {\n      return Subscription.EMPTY;\n    }\n  };\n\n  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.delay = scheduler.frame + delay;\n    var actions = scheduler.actions;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  };\n\n  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return undefined;\n  };\n\n  VirtualAction.prototype._execute = function (state, delay) {\n    if (this.active === true) {\n      return _super.prototype._execute.call(this, state, delay);\n    }\n  };\n\n  VirtualAction.sortActions = function (a, b) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  return VirtualAction;\n}(AsyncAction);\n\nexport { VirtualAction };","map":{"version":3,"sources":["/Users/ishannnnnm/Desktop/portfolio app/client/node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n  /** @deprecated Not used in VirtualTimeScheduler directly. Will be removed in v8. */\n  static frameTimeFactor = 10;\n\n  /**\n   * The current frame for the state of the virtual scheduler instance. The the difference\n   * between two \"frames\" is synonymous with the passage of \"virtual time units\". So if\n   * you record `scheduler.frame` to be `1`, then later, observe `scheduler.frame` to be at `11`,\n   * that means `10` virtual time units have passed.\n   */\n  public frame: number = 0;\n\n  /**\n   * Used internally to examine the current virtual action index being processed.\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  public index: number = -1;\n\n  /**\n   * This creates an instance of a `VirtualTimeScheduler`. Experts only. The signature of\n   * this constructor is likely to change in the long run.\n   *\n   * @param schedulerActionCtor The type of Action to initialize when initializing actions during scheduling.\n   * @param maxFrames The maximum number of frames to process before stopping. Used to prevent endless flush cycles.\n   */\n  constructor(schedulerActionCtor: typeof AsyncAction = VirtualAction as any, public maxFrames: number = Infinity) {\n    super(schedulerActionCtor, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n    const { actions, maxFrames } = this;\n    let error: any;\n    let action: AsyncAction<any> | undefined;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    }\n\n    if (error) {\n      while ((action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\nexport class VirtualAction<T> extends AsyncAction<T> {\n  protected active: boolean = true;\n\n  constructor(\n    protected scheduler: VirtualTimeScheduler,\n    protected work: (this: SchedulerAction<T>, state?: T) => void,\n    protected index: number = (scheduler.index += 1)\n  ) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (Number.isFinite(delay)) {\n      if (!this.id) {\n        return super.schedule(state, delay);\n      }\n      this.active = false;\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      const action = new VirtualAction(this.scheduler, this.work);\n      this.add(action);\n      return action.schedule(state, delay);\n    } else {\n      // If someone schedules something with Infinity, it'll never happen. So we\n      // don't even schedule it.\n      return Subscription.EMPTY;\n    }\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const { actions } = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  private static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}